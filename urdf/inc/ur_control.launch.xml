<?xml version="1.0"?>
<launch>
  <!--
    本文件通过接受类似参数并扮演类似角色(即启动驱动节点(此处为Gazebo)并加载ros_control控制器),模拟加载UR机器人驱动程序。

    此.launch文件的部分参数对于使用ur_robot_driver控制真实机器人的用户来说较为熟悉。

    其他参数为Gazebo专用参数。

    注意：我们在此生成并启动ros_control控制器,这些控制器与gazebo_ros_control共同构成真实机器人驱动程序的替代方案。
  -->

  <!-- 与ur_robot_driver共享的参数 -->
  <arg name="controller_config_file" doc="用于定义ROS-Control控制器的配置文件"/>
  <arg name="controllers" default="joint_state_controller eff_joint_traj_controller"/>
  <arg name="stopped_controllers" default="joint_group_eff_controller"/>

  <!-- Gazebo参数 -->
  <arg name="gazebo_model_name" default="robot" doc="Gazebo中模型的名称(生成后)"/>
  <arg name="gazebo_world" default="worlds/empty.world" doc="Gazebo中加载的.world文件"/>
  <arg name="gui" default="true" doc="若为true,启动Gazebo图形界面:若为false,仅启动Gazebo服务器"/>
  <arg name="paused" default="false" doc="若为true,以暂停模式启动Gazebo:若为false,Gazebo加载后立即开始仿真"/>
  <arg name="robot_description_param_name" default="robot_description" doc="包含机器人描述(即URDF)的参数名称,该描述将生成到Gazebo中"/>
  <arg name="spawn_z" default="0.1" doc="模型生成的高度。注意：数值过低会导致机器人与地面碰撞"/>
  <arg name="start_gazebo" default="true" doc="若为true,启动Gazebo:若为false,假定Gazebo已在其他位置启动"/>

  <!-- 设置初始配置 -->
  <arg name="initial_joint_positions" default=" -J shoulder_pan_joint 0.0  -J shoulder_lift_joint -1.57 -J elbow_joint 0.0 -J wrist_1_joint -1.57 -J wrist_2_joint 0.0 -J wrist_3_joint 0.0" doc="机器人的初始关节配置"/>

  <!-- 加载控制器设置 -->
  <rosparam file="$(arg controller_config_file)" command="load"/>

  <!-- 启动Gazebo并根据需要加载空世界 -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch" if="$(arg start_gazebo)">
    <arg name="world_name" value="$(arg gazebo_world)"/>
    <arg name="paused" value="$(arg paused)"/>
    <arg name="gui" value="$(arg gui)"/>
  </include>

  <!-- 在刚启动的仿真中生成之前加载的模型 -->
  <node name="spawn_gazebo_model" pkg="gazebo_ros" type="spawn_model"
    args="
      -urdf
      -param $(arg robot_description_param_name)
      -model $(arg gazebo_model_name)
      -z $(arg spawn_z)
      $(arg initial_joint_positions)
      "
    output="screen" respawn="false" />

  <!-- 加载并启动controllers参数中列出的控制器 -->
  <node name="ros_control_controller_spawner" pkg="controller_manager" type="spawner"
    args="$(arg controllers)" output="screen" respawn="false" />

  <!-- 加载其他控制器,但不启动 -->
  <node name="ros_control_stopped_spawner" pkg="controller_manager" type="spawner"
    args="--stopped $(arg stopped_controllers)" output="screen" respawn="false" />

</launch>
